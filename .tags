!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A_NULL	Types.h	/^typedef enum {A_NULL, A_X, A_Y}Axis;$/;"	e	enum:__anon1
A_X	Types.h	/^typedef enum {A_NULL, A_X, A_Y}Axis;$/;"	e	enum:__anon1
A_Y	Types.h	/^typedef enum {A_NULL, A_X, A_Y}Axis;$/;"	e	enum:__anon1
Axis	Types.h	/^typedef enum {A_NULL, A_X, A_Y}Axis;$/;"	t	typeref:enum:__anon1
CAR_NUM	Types.h	4;"	d
Car	Types.h	/^}Car;$/;"	t	typeref:struct:__anon3
Coord	Types.h	/^}Coord;$/;"	t	typeref:struct:__anon2
DOGELIB_PANIC_H	Panic.h	2;"	d
File	Types.h	/^typedef FILE File;$/;"	t
Node	Types.h	/^typedef struct Node{$/;"	s
Node	Types.h	/^}Node;$/;"	t	typeref:struct:Node
State	Types.h	/^}State;$/;"	t	typeref:struct:__anon4
TYPES_H	Types.h	2;"	d
UTIL_H	Util.h	2;"	d
assertExpr	Panic.h	43;"	d
assertExprHelper	Panic.h	/^void assertExprHelper(const char *func, const char *file, const int line, const bool val, const char *expr)$/;"	f
assertExprMsg	Panic.h	104;"	d
assertExprMsgHelper	Panic.h	/^void assertExprMsgHelper(const char *func, const char *file, const int line, const bool val, const char *expr, const char *format, ...)$/;"	f
assertLogExpr	Panic.h	58;"	d
assertLogExprHelper	Panic.h	/^void assertLogExprHelper(const char *func, const char *file, const int line, const bool val, const char *expr)$/;"	f
assertLogExprMsg	Panic.h	125;"	d
assertLogExprMsgHelper	Panic.h	/^void assertLogExprMsgHelper(const char *func, const char *file, const int line, const bool val, const char *expr, const char *format, ...)$/;"	f
axis	Types.h	/^    Axis axis;$/;"	m	struct:__anon3
axisGet	Util.h	/^Axis axisGet(const State s, const Coord pos)$/;"	f
axisInv	Util.h	/^Axis axisInv(const Axis a)$/;"	f
car	Types.h	/^    char car;$/;"	m	struct:Node
carCanShift	Util.h	/^bool carCanShift(State s, const char car, const int val)$/;"	f
carCharIndex	Util.h	/^size_t carCharIndex(const char c)$/;"	f
carEnd	Util.h	/^Coord carEnd(const State s, const char car)$/;"	f
carShift	Util.h	/^State carShift(State s, const char car, const int val)$/;"	f
carStart	Util.h	/^Coord carStart(const State s, const char car)$/;"	f
cars	Types.h	/^Car cars[CAR_NUM] = {$/;"	v
coordShift	Util.h	/^Coord coordShift(const Coord pos, const Axis a, const int val)$/;"	f
enabled	Types.h	/^    bool enabled;$/;"	m	struct:__anon3
errAxis	Util.h	/^void errAxis(const char c)$/;"	f
grid	Types.h	/^    char grid[6][6];$/;"	m	struct:__anon4
iC	Util.h	/^Coord iC(const int x, const int y)$/;"	f
imax	Util.h	/^int imax(const int a, const int b)$/;"	f
imin	Util.h	/^int imin(const int a, const int b)$/;"	f
inGrid	Util.h	/^bool inGrid(const Coord pos)$/;"	f
len	Types.h	/^    uint len;$/;"	m	struct:__anon3
letter	Types.h	/^    char letter;$/;"	m	struct:__anon3
logExpr	Panic.h	85;"	d
logExprHelper	Panic.h	/^void logExprHelper(const char * format, const char *exprs,...)$/;"	f
logMsg	Panic.h	74;"	d
logMsgHelper	Panic.h	/^void logMsgHelper(const char *func, const char *file, const int line, const char * format, const char *exprs,...)$/;"	f
main	main.c	/^int main(int argc, char **argv)$/;"	f
newNode	main.c	/^Node* newNode(Node *parent, const char car, const int val)$/;"	f
next	Types.h	/^    struct Node *next;$/;"	m	struct:Node	typeref:struct:Node::Node
notNull	Panic.h	30;"	d
notNullHelper	Panic.h	/^void notNullHelper(const char *func, const char *file, const int line, void *ptr)$/;"	f
panic	Panic.h	18;"	d
panicHelper	Panic.h	/^void panicHelper(const char *func, const char *file, const int line, const char * format, ...)$/;"	f
start	Util.h	/^Node* start(const int argc, char **argv)$/;"	f
state	Types.h	/^    State state;$/;"	m	struct:Node
stateEmpty	Util.h	/^State stateEmpty(void)$/;"	f
statePrint	Util.h	/^void statePrint(const State s)$/;"	f
uint	Types.h	/^typedef unsigned int uint;$/;"	t
val	Types.h	/^    int val;$/;"	m	struct:Node
x	Types.h	/^    int x; int y;$/;"	m	struct:__anon2
y	Types.h	/^    int x; int y;$/;"	m	struct:__anon2
